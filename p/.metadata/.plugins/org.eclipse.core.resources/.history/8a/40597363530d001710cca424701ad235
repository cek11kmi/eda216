import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

public class Database {

	/**
	 * The database connection.
	 */
	private Connection conn;

	/**
	 * Create the database interface object. Connection to the database is
	 * performed later.
	 */
	public Database() {
		conn = null;
	}

	/**
	 * Open a connection to the database, using the specified user name and
	 * password.
	 */
	public boolean openConnection(String filename) {
		try {
			Class.forName("org.sqlite.JDBC");
			conn = DriverManager.getConnection("jdbc:sqlite:" + filename);
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	/**
	 * Close the connection to the database.
	 */
	public void closeConnection() {
		try {
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Check if the connection to the database has been established
	 * 
	 * @return true if the connection has been established
	 */
	public boolean isConnected() {
		return conn != null;
	}

	public List<Integer> getDoctorPatients(int doctorId) throws SQLException {
		List<Integer> patientList = new LinkedList<Integer>();
		PreparedStatement ps = null;
		ResultSet rs = null;

		String sql = "SELECT patient_id\n" + "FROM   patients\n" + "WHERE  doctor_id = ?";
		ps = conn.prepareStatement(sql);
		ps.setInt(1, doctorId);
		rs = ps.executeQuery();
		while (rs.next()) {
			patientList.add(rs.getInt("patient_id"));
		}

		closePs(ps, rs);
		return patientList;
	}

	public void foreignKey() throws SQLException {
		PreparedStatement ps = null;
		try {
			String sql = "PRAGMA foreign_keys = on";
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
	}

private void closePs(PreparedStatement ps, ResultSet rs) {
	try {
		if (ps != null) {
			ps.close();
		}
		if (rs != null) {
			rs.close();
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}
}
