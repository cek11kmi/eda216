import java.sql.SQLException;

import javafx.geometry.Insets;
import javafx.geometry.Pos;

import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;


public class TabRegisterPallet {

	// Layout holder
	public HBox hBox;

	// Main components
	private TextField palletBarcodeTF;
	private Label invalidInputMessage;
	private Button registerPallet;
	private Label registrationMessage;


	// External objects
	private Database db;


	public TabRegisterPallet(int gap, int padding, Database db) {
		this.db = db;
		initializeComponents(gap, padding);

	}

	private void initializeComponents(int gap, int padding) {
		// Horizontal box
		hBox = new HBox();
		hBox.setSpacing(gap);
		hBox.setPadding(new Insets(padding, padding, padding, padding));

		// Grid pane (Is put at the top in "vBox1", contains labels and text
		// fields)
		GridPane grid = new GridPane();
		grid.setHgap(gap);
		grid.setVgap(gap);

		// Grid pane (grid) components
		Label name = new Label("Pallet barcode");

		palletBarcodeTF = new TextField();

		palletBarcodeTF.setPromptText("E.g. 1");

		// Add grid pane (grid) components
		grid.add(name, 0, 0);
		grid.add(palletBarcodeTF, 0, 1);

		// Vertical box (Is put in the left in hBox, contains "grid" and
		// "invalidInputMessage"-label)
		VBox vBox1 = new VBox();
		vBox1.setSpacing(gap);

		// Vertical box (vBox1) components
		invalidInputMessage = new Label("");
		invalidInputMessage.setTextFill(Color.RED);
		invalidInputMessage.setWrapText(true);

		// Add vertical box (vBox1) components
		vBox1.getChildren().add(grid);
		vBox1.getChildren().add(invalidInputMessage);

		// Vertical box (Is put to the right in hBox, contains a horizontal box)
		VBox vBox2 = new VBox();
		vBox2.setAlignment(Pos.BOTTOM_RIGHT);

		// Horizontal box (Is put inside vBox2, contains buttons)
		HBox hBox2 = new HBox();
		hBox2.setSpacing(gap);
		hBox2.setAlignment(Pos.CENTER_RIGHT);

		// Create pallet
		registerPallet = new Button("Create pallet");
		registerPallet.setOnAction(e -> createPallet());

		// Add components to horizontal box (hBox2)
		hBox2.getChildren().add(registerPallet);

		// Add components to vertical box (vBox2)
		vBox2.getChildren().add(hBox2);

		// Add major component holders (vBox1 and vBox2) to the horizontal box
		// (hBox)
		hBox.getChildren().add(vBox1);
		hBox.getChildren().add(vBox2);
		HBox.setHgrow(vBox2, Priority.ALWAYS);
	}

	private void createPallet() {
		// Restore any previous error marks (e.g. text field marked yellow)
		restoreInvalidInputs();

		// Get Strings from text fields
		String cookieName = palletBarcodeTF.getText();

		// Check if all text fields contains text of acceptable length
		if (cookieName.length() > 0 && cookieName.length() < 101) {
			try {
				if (db.getCookies().contains(cookieName)) {
					int palletId = db.addPallet(cookieName);
					if (palletId != 0) {
						restoreInvalidInputs();
						clearTextField();
					}
				} else {
					invalidNameInput();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			invalidNameInput();
		}
	}

	private void invalidNameInput() {
		// Mark as YELLOW
		palletBarcodeTF.setStyle("-fx-background-color: #ffff0052");
		addInvalidInputMessage(palletBarcodeTF.getText() + " is not a valid cookie name");
	}

	private void restoreInvalidInputs() {
		// Restore text field colors
		palletBarcodeTF.setStyle("");

		// Set the error message label text to an "empty" string
		invalidInputMessage.setText("");
	}

	private void addInvalidInputMessage(String message) {
		if (invalidInputMessage.getText().length() == 0) {
			invalidInputMessage.setText(invalidInputMessage.getText() + message);
		} else {
			invalidInputMessage.setText(invalidInputMessage.getText() + ", " + message);
		}
	}


	private void clearTextField() {
		palletBarcodeTF.setText("");
	}

}
