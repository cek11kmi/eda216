import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class TabCreatePallet {
	// Layout holder
	public HBox hBox;

	// Main components
	private TextField cookieNameTF;
	private Label invalidInputMessage;
	private Button createPallet;

	// POP UP (PIN code)
	private Stage palletLabelStage;
	private Scene palletLabelcene;
	private Label palletLabel;

	// External objects
	private Database db;
	private Stage primaryStage;

	public TabCreatePallet(int gap, int padding, Database db, Stage primaryStage) {
		this.db = db;
		this.primaryStage = primaryStage;
		initializeComponents(gap, padding);
		initializePalletLabelPopUp(gap, padding);
	}

	private void initializeComponents(int gap, int padding) {
		// Horizontal box
		hBox = new HBox();
		hBox.setSpacing(gap);
		hBox.setPadding(new Insets(padding, padding, padding, padding));

		// Grid pane (Is put at the top in "vBox1", contains labels and text
		// fields)
		GridPane grid = new GridPane();
		grid.setHgap(gap);
		grid.setVgap(gap);

		// Grid pane (grid) components
		Label name = new Label("Cookie name");

		cookieNameTF = new TextField();

		cookieNameTF.setPromptText("E.g. Nut ring");

		// Add grid pane (grid) components
		grid.add(name, 0, 0);
		grid.add(cookieNameTF, 0, 1);

		// Vertical box (Is put in the left in hBox, contains "grid" and
		// "invalidInputMessage"-label)
		VBox vBox1 = new VBox();
		vBox1.setSpacing(gap);

		// Vertical box (vBox1) components
		invalidInputMessage = new Label("");
		invalidInputMessage.setTextFill(Color.RED);
		invalidInputMessage.setWrapText(true);

		// Add vertical box (vBox1) components
		vBox1.getChildren().add(grid);
		vBox1.getChildren().add(invalidInputMessage);

		// Vertical box (Is put to the right in hBox, contains a horizontal box)
		VBox vBox2 = new VBox();
		vBox2.setAlignment(Pos.BOTTOM_RIGHT);

		// Horizontal box (Is put inside vBox2, contains buttons)
		HBox hBox2 = new HBox();
		hBox2.setSpacing(gap);
		hBox2.setAlignment(Pos.CENTER_RIGHT);

		// Create pallet
		createPallet = new Button("Create pallet");
		createPallet.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				// Restore any previous error marks (e.g. text field marked red)
				restoreInvalidInputs();

				// Get Strings from text fields
				String name = nameTF.getText();
				String email = emailTF.getText();
				String phoneNumber = phoneNumberTF.getText();

				// Check if all text fields contains text of acceptable length
				if (name.length() > 0 && name.length() < 101) {
					if (!garage.checkUserEmail(name, email, phoneNumber)) {
						invalidEmailInput(0);
					}
					if (!garage.checkUserPhone(name, email, phoneNumber)) {
						invalidPhoneNumberInput(0);
					}

					if (garage.checkUserEmail(name, email, phoneNumber && garage.checkUserPhone(name, email, phoneNumber) {
						if (garage.addUser(name, email, phoneNumber)) {
							restoreInvalidInputs();
							clearTextFieldsAndCheckBoxes.fire();
							showPINCodePopUp(garage.findUser(name, email, phoneNumber).getPin());
						
						}

					});
		
		
	}
	
	private void invalidNameInput() {
		// Mark as YELLOW
		cookieNameTF.setStyle("-fx-background-color: #ffff0052");
	}
	
	private void restoreInvalidInputs() {
		// Restore text field colors
		nameTF.setStyle("");
		emailTF.setStyle("");
		phoneNumberTF.setStyle("");

		// Set the error message label text to an "empty" string
		invalidInputMessage.setText("");
}


}
